$date
	Sat Oct  5 00:13:31 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module three_bit_SA_test $end
$var wire 3 ! q [2:0] $end
$var wire 1 " Cout $end
$var reg 3 # A [2:0] $end
$var reg 3 $ B [2:0] $end
$var reg 1 % clk $end
$var reg 1 & d $end
$var reg 1 ' reset $end
$scope module uut $end
$var wire 3 ( A [2:0] $end
$var wire 3 ) B [2:0] $end
$var wire 1 % clk $end
$var wire 1 & d $end
$var wire 1 ' reset $end
$var wire 1 * z $end
$var wire 1 + y $end
$var wire 3 , q [2:0] $end
$var wire 1 - S $end
$var wire 1 " Cout $end
$scope module D1 $end
$var wire 1 % clk $end
$var wire 1 ' reset $end
$var wire 1 " d $end
$var reg 1 * q $end
$upscope $end
$scope module FA1 $end
$var wire 1 " Cout $end
$var wire 1 . G $end
$var wire 1 / P $end
$var wire 1 - S $end
$var wire 1 0 temp $end
$var wire 1 1 x $end
$var wire 1 * z $end
$var wire 1 + y $end
$upscope $end
$scope module SR1 $end
$var wire 3 2 A [2:0] $end
$var wire 1 % clk $end
$var wire 1 - d $end
$var wire 1 ' reset $end
$var wire 1 3 q3 $end
$var wire 1 4 q2 $end
$var wire 1 5 q1 $end
$var wire 3 6 q [2:0] $end
$scope module D1 $end
$var wire 1 % clk $end
$var wire 1 - d $end
$var wire 1 ' reset $end
$var reg 1 5 q $end
$upscope $end
$scope module D2 $end
$var wire 1 % clk $end
$var wire 1 5 d $end
$var wire 1 ' reset $end
$var reg 1 4 q $end
$upscope $end
$scope module D3 $end
$var wire 1 % clk $end
$var wire 1 4 d $end
$var wire 1 ' reset $end
$var reg 1 3 q $end
$upscope $end
$upscope $end
$scope module SR2 $end
$var wire 3 7 A [2:0] $end
$var wire 1 % clk $end
$var wire 1 & d $end
$var wire 1 + q $end
$var wire 1 ' reset $end
$var wire 1 8 q3 $end
$var wire 1 9 q2 $end
$var wire 1 : q1 $end
$scope module D1 $end
$var wire 1 % clk $end
$var wire 1 & d $end
$var wire 1 ' reset $end
$var reg 1 : q $end
$upscope $end
$scope module D2 $end
$var wire 1 % clk $end
$var wire 1 : d $end
$var wire 1 ' reset $end
$var reg 1 9 q $end
$upscope $end
$scope module D3 $end
$var wire 1 % clk $end
$var wire 1 9 d $end
$var wire 1 ' reset $end
$var reg 1 8 q $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ; i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 < i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 = i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
bx <
bx ;
0:
09
08
b0 7
b0 6
05
04
03
b0 2
01
00
0/
0.
0-
b0 ,
0+
0*
bx )
bx (
1'
0&
0%
bx $
bx #
0"
b0 !
$end
#5
1%
#10
0%
1&
b100 $
b100 )
b11 #
b11 (
b0 ;
0'
#15
1:
1%
#20
0%
b1 ;
#25
19
1%
#30
0%
0&
b10 ;
#35
1-
1/
0:
1+
18
1%
#40
0%
b0 <
b11 ;
#45
09
b100 !
b100 ,
b100 6
15
1%
#50
0%
b1 <
#55
0-
0/
b110 !
b110 ,
b110 6
14
0+
08
1%
#60
0%
1&
b10 <
#65
1-
1/
11
1:
13
b11 !
b11 ,
b11 6
05
1%
#70
0%
0&
b0 =
b11 <
#75
15
b101 !
b101 ,
b101 6
04
0:
19
1%
#80
0%
b1 =
#85
01
1+
18
09
03
b110 !
b110 ,
b110 6
14
1%
#90
0%
b10 =
#95
1-
11
1/
b111 !
b111 ,
b111 6
13
0+
08
1%
#100
0%
b11 =
